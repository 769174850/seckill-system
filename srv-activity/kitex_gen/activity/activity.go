// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package activity

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"seckill_system/srv-activity/kitex_gen/product"
	"strings"
)

type Activity struct {
	Id        int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name      *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Desc      *string `thrift:"desc,3,optional" frugal:"3,optional,string" json:"desc,omitempty"`
	StartTime *string `thrift:"start_time,4,optional" frugal:"4,optional,string" json:"start_time,omitempty"`
	EndTime   *string `thrift:"end_time,5,optional" frugal:"5,optional,string" json:"end_time,omitempty"`
}

func NewActivity() *Activity {
	return &Activity{}
}

func (p *Activity) InitDefault() {
	*p = Activity{}
}

func (p *Activity) GetId() (v int64) {
	return p.Id
}

var Activity_Name_DEFAULT string

func (p *Activity) GetName() (v string) {
	if !p.IsSetName() {
		return Activity_Name_DEFAULT
	}
	return *p.Name
}

var Activity_Desc_DEFAULT string

func (p *Activity) GetDesc() (v string) {
	if !p.IsSetDesc() {
		return Activity_Desc_DEFAULT
	}
	return *p.Desc
}

var Activity_StartTime_DEFAULT string

func (p *Activity) GetStartTime() (v string) {
	if !p.IsSetStartTime() {
		return Activity_StartTime_DEFAULT
	}
	return *p.StartTime
}

var Activity_EndTime_DEFAULT string

func (p *Activity) GetEndTime() (v string) {
	if !p.IsSetEndTime() {
		return Activity_EndTime_DEFAULT
	}
	return *p.EndTime
}
func (p *Activity) SetId(val int64) {
	p.Id = val
}
func (p *Activity) SetName(val *string) {
	p.Name = val
}
func (p *Activity) SetDesc(val *string) {
	p.Desc = val
}
func (p *Activity) SetStartTime(val *string) {
	p.StartTime = val
}
func (p *Activity) SetEndTime(val *string) {
	p.EndTime = val
}

var fieldIDToName_Activity = map[int16]string{
	1: "id",
	2: "name",
	3: "desc",
	4: "start_time",
	5: "end_time",
}

func (p *Activity) IsSetName() bool {
	return p.Name != nil
}

func (p *Activity) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *Activity) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *Activity) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *Activity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Activity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Activity) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Activity) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Activity) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *Activity) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartTime = _field
	return nil
}
func (p *Activity) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndTime = _field
	return nil
}

func (p *Activity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Activity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Activity) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Activity) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Activity) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Activity) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("start_time", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Activity) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err = oprot.WriteFieldBegin("end_time", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Activity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Activity(%+v)", *p)

}

func (p *Activity) DeepEqual(ano *Activity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field4DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.EndTime) {
		return false
	}
	return true
}

func (p *Activity) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Activity) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field3DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field4DeepEqual(src *string) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartTime, *src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field5DeepEqual(src *string) bool {

	if p.EndTime == src {
		return true
	} else if p.EndTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndTime, *src) != 0 {
		return false
	}
	return true
}

type ActivityService interface {
	GetActivities(ctx context.Context, a *Activity) (r []*product.Product, err error)

	GetActivityInfo(ctx context.Context, a *Activity) (r *Activity, err error)
}

type ActivityServiceClient struct {
	c thrift.TClient
}

func NewActivityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ActivityServiceClient {
	return &ActivityServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewActivityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ActivityServiceClient {
	return &ActivityServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewActivityServiceClient(c thrift.TClient) *ActivityServiceClient {
	return &ActivityServiceClient{
		c: c,
	}
}

func (p *ActivityServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ActivityServiceClient) GetActivities(ctx context.Context, a *Activity) (r []*product.Product, err error) {
	var _args ActivityServiceGetActivitiesArgs
	_args.A = a
	var _result ActivityServiceGetActivitiesResult
	if err = p.Client_().Call(ctx, "GetActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ActivityServiceClient) GetActivityInfo(ctx context.Context, a *Activity) (r *Activity, err error) {
	var _args ActivityServiceGetActivityInfoArgs
	_args.A = a
	var _result ActivityServiceGetActivityInfoResult
	if err = p.Client_().Call(ctx, "GetActivityInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ActivityServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ActivityService
}

func (p *ActivityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ActivityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ActivityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewActivityServiceProcessor(handler ActivityService) *ActivityServiceProcessor {
	self := &ActivityServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetActivities", &activityServiceProcessorGetActivities{handler: handler})
	self.AddToProcessorMap("GetActivityInfo", &activityServiceProcessorGetActivityInfo{handler: handler})
	return self
}
func (p *ActivityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type activityServiceProcessorGetActivities struct {
	handler ActivityService
}

func (p *activityServiceProcessorGetActivities) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ActivityServiceGetActivitiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetActivities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ActivityServiceGetActivitiesResult{}
	var retval []*product.Product
	if retval, err2 = p.handler.GetActivities(ctx, args.A); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetActivities: "+err2.Error())
		oprot.WriteMessageBegin("GetActivities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetActivities", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type activityServiceProcessorGetActivityInfo struct {
	handler ActivityService
}

func (p *activityServiceProcessorGetActivityInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ActivityServiceGetActivityInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetActivityInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ActivityServiceGetActivityInfoResult{}
	var retval *Activity
	if retval, err2 = p.handler.GetActivityInfo(ctx, args.A); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetActivityInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetActivityInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetActivityInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ActivityServiceGetActivitiesArgs struct {
	A *Activity `thrift:"a,1" frugal:"1,default,Activity" json:"a"`
}

func NewActivityServiceGetActivitiesArgs() *ActivityServiceGetActivitiesArgs {
	return &ActivityServiceGetActivitiesArgs{}
}

func (p *ActivityServiceGetActivitiesArgs) InitDefault() {
	*p = ActivityServiceGetActivitiesArgs{}
}

var ActivityServiceGetActivitiesArgs_A_DEFAULT *Activity

func (p *ActivityServiceGetActivitiesArgs) GetA() (v *Activity) {
	if !p.IsSetA() {
		return ActivityServiceGetActivitiesArgs_A_DEFAULT
	}
	return p.A
}
func (p *ActivityServiceGetActivitiesArgs) SetA(val *Activity) {
	p.A = val
}

var fieldIDToName_ActivityServiceGetActivitiesArgs = map[int16]string{
	1: "a",
}

func (p *ActivityServiceGetActivitiesArgs) IsSetA() bool {
	return p.A != nil
}

func (p *ActivityServiceGetActivitiesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityServiceGetActivitiesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ActivityServiceGetActivitiesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewActivity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.A = _field
	return nil
}

func (p *ActivityServiceGetActivitiesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivities_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityServiceGetActivitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.A.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActivityServiceGetActivitiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivitiesArgs(%+v)", *p)

}

func (p *ActivityServiceGetActivitiesArgs) DeepEqual(ano *ActivityServiceGetActivitiesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.A) {
		return false
	}
	return true
}

func (p *ActivityServiceGetActivitiesArgs) Field1DeepEqual(src *Activity) bool {

	if !p.A.DeepEqual(src) {
		return false
	}
	return true
}

type ActivityServiceGetActivitiesResult struct {
	Success []*product.Product `thrift:"success,0,optional" frugal:"0,optional,list<product.Product>" json:"success,omitempty"`
}

func NewActivityServiceGetActivitiesResult() *ActivityServiceGetActivitiesResult {
	return &ActivityServiceGetActivitiesResult{}
}

func (p *ActivityServiceGetActivitiesResult) InitDefault() {
	*p = ActivityServiceGetActivitiesResult{}
}

var ActivityServiceGetActivitiesResult_Success_DEFAULT []*product.Product

func (p *ActivityServiceGetActivitiesResult) GetSuccess() (v []*product.Product) {
	if !p.IsSetSuccess() {
		return ActivityServiceGetActivitiesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ActivityServiceGetActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.([]*product.Product)
}

var fieldIDToName_ActivityServiceGetActivitiesResult = map[int16]string{
	0: "success",
}

func (p *ActivityServiceGetActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ActivityServiceGetActivitiesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityServiceGetActivitiesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ActivityServiceGetActivitiesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*product.Product, 0, size)
	values := make([]product.Product, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ActivityServiceGetActivitiesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivities_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityServiceGetActivitiesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ActivityServiceGetActivitiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivitiesResult(%+v)", *p)

}

func (p *ActivityServiceGetActivitiesResult) DeepEqual(ano *ActivityServiceGetActivitiesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ActivityServiceGetActivitiesResult) Field0DeepEqual(src []*product.Product) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ActivityServiceGetActivityInfoArgs struct {
	A *Activity `thrift:"a,1" frugal:"1,default,Activity" json:"a"`
}

func NewActivityServiceGetActivityInfoArgs() *ActivityServiceGetActivityInfoArgs {
	return &ActivityServiceGetActivityInfoArgs{}
}

func (p *ActivityServiceGetActivityInfoArgs) InitDefault() {
	*p = ActivityServiceGetActivityInfoArgs{}
}

var ActivityServiceGetActivityInfoArgs_A_DEFAULT *Activity

func (p *ActivityServiceGetActivityInfoArgs) GetA() (v *Activity) {
	if !p.IsSetA() {
		return ActivityServiceGetActivityInfoArgs_A_DEFAULT
	}
	return p.A
}
func (p *ActivityServiceGetActivityInfoArgs) SetA(val *Activity) {
	p.A = val
}

var fieldIDToName_ActivityServiceGetActivityInfoArgs = map[int16]string{
	1: "a",
}

func (p *ActivityServiceGetActivityInfoArgs) IsSetA() bool {
	return p.A != nil
}

func (p *ActivityServiceGetActivityInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityServiceGetActivityInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ActivityServiceGetActivityInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewActivity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.A = _field
	return nil
}

func (p *ActivityServiceGetActivityInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityServiceGetActivityInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.A.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActivityServiceGetActivityInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivityInfoArgs(%+v)", *p)

}

func (p *ActivityServiceGetActivityInfoArgs) DeepEqual(ano *ActivityServiceGetActivityInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.A) {
		return false
	}
	return true
}

func (p *ActivityServiceGetActivityInfoArgs) Field1DeepEqual(src *Activity) bool {

	if !p.A.DeepEqual(src) {
		return false
	}
	return true
}

type ActivityServiceGetActivityInfoResult struct {
	Success *Activity `thrift:"success,0,optional" frugal:"0,optional,Activity" json:"success,omitempty"`
}

func NewActivityServiceGetActivityInfoResult() *ActivityServiceGetActivityInfoResult {
	return &ActivityServiceGetActivityInfoResult{}
}

func (p *ActivityServiceGetActivityInfoResult) InitDefault() {
	*p = ActivityServiceGetActivityInfoResult{}
}

var ActivityServiceGetActivityInfoResult_Success_DEFAULT *Activity

func (p *ActivityServiceGetActivityInfoResult) GetSuccess() (v *Activity) {
	if !p.IsSetSuccess() {
		return ActivityServiceGetActivityInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ActivityServiceGetActivityInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*Activity)
}

var fieldIDToName_ActivityServiceGetActivityInfoResult = map[int16]string{
	0: "success",
}

func (p *ActivityServiceGetActivityInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ActivityServiceGetActivityInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityServiceGetActivityInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ActivityServiceGetActivityInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewActivity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ActivityServiceGetActivityInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityServiceGetActivityInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ActivityServiceGetActivityInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivityInfoResult(%+v)", *p)

}

func (p *ActivityServiceGetActivityInfoResult) DeepEqual(ano *ActivityServiceGetActivityInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ActivityServiceGetActivityInfoResult) Field0DeepEqual(src *Activity) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
